default:
  tags:
    - type/docker
    - docker/privileged
    - cnt
    - container-dev
    - os/linux

include:
  - local: '.common-ci.yml'

variables:
  # Release "devel"-tagged images off the master branch
  RELEASE_DEVEL_BRANCH: "master"
  RELEASE_DEVEL_TAG: "devel"

# The .scan step forms the base of the image scan operation performed before releasing
# images.
.scan:
  stage: scan
  image: "${PULSE_IMAGE}"
  variables:
    REGISTRY: "${CI_REGISTRY_IMAGE}"
    VERSION: "${CI_COMMIT_SHA}"
    # Define both OUT_IMAGE and OUT_IMAGE_TAG to allow for these to be used when scanning the
    # "local" (tagged) image
    OUT_IMAGE_TAG: "${CI_COMMIT_SHA}-${TARGET}"
    OUT_IMAGE: "${IMAGE_NAME}"
    # Pulse specific vars
    CONTAINER_ARCHIVE: "${OUT_IMAGE}-${OUT_IMAGE_TAG}.tar"
    CONTAINER_POLICY: "ngc_external_policy.json"
  except:
    variables:
    - $CI_COMMIT_MESSAGE =~ /\[skip[ _-]scans?\]/i
    - $SKIP_SCANS
  before_script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
    - docker pull "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHA}-${TARGET}"
    - docker tag "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${CI_COMMIT_SHA}-${TARGET}" "${OUT_IMAGE}:${OUT_IMAGE_TAG}"
    - docker save "${OUT_IMAGE}:${OUT_IMAGE_TAG}" > "${CONTAINER_ARCHIVE}"
    - AuthHeader=$(echo -n $SSA_CLIENT_ID:$SSA_CLIENT_SECRET | base64 -w0)
    - >
      export SSA_TOKEN=$(curl --request POST --header "Authorization: Basic $AuthHeader" --header "Content-Type: application/x-www-form-urlencoded" ${SSA_ISSUER_URL} | jq ".access_token" |  tr -d '"')
    -  if [ -z "$SSA_TOKEN" ]; then exit 1; else echo "SSA_TOKEN set!"; fi
  script:
    - pulse-cli -n $NSPECT_ID --pss $PSS_URL --ssa $SSA_TOKEN scan -i $CONTAINER_ARCHIVE -p $CONTAINER_POLICY -o
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - pulse-cli.log
      - licenses.json
      - sbom.json
      - vulns.json


scan:gpu-operator:
  extends:
    - .scan
    - .target-gpu-operator

scan:gpu-operator-validator:
  extends:
    - .scan
    - .target-gpu-operator-validator

# Define the external release steps for NGC and Dockerhub
.release:ngc:
  extends: .release:external
  variables:
    OUT_REGISTRY_USER: "${NGC_REGISTRY_USER}"
    OUT_REGISTRY_TOKEN: "${NGC_REGISTRY_TOKEN}"
    OUT_REGISTRY: "${NGC_REGISTRY}"
    OUT_IMAGE: "${NGC_REGISTRY_IMAGE}" # This needs to change for the gpu-operator and gpu-operator-validator

.release:dockerhub:
  extends: .release:external
  variables:
    OUT_REGISTRY_USER: "${REGISTRY_USER}"
    OUT_REGISTRY_TOKEN: "${REGISTRY_TOKEN}"
    OUT_REGISTRY: "${DOCKERHUB_REGISTRY}"
    OUT_IMAGE: "${REGISTRY_IMAGE}" # This needs to change for the gpu-operator and gpu-operator-validator

release:ngc-gpu-operator:
  extends:
    - .release:ngc
    - .target-gpu-operator
  dependencies:
    - deploy:sha-ci-gpu-operator
    - scan:gpu-operator

release:ngc-gpu-operator-validator:
  extends:
    - .release:ngc
    - .target-gpu-operator-validator
  variables:
    OUT_IMAGE: "${NGC_PROD_VALIDATOR_IMAGE}"
  dependencies:
    - deploy:sha-ci-gpu-operator-validator
    - scan:gpu-operator-validator

release:dockerhub-gpu-operator:
  extends:
    - .release:dockerhub
    - .target-gpu-operator
  dependencies:
    - deploy:sha-ci-gpu-operator
    - scan:gpu-operator

release:dockerhub-gpu-operator-validator:
  extends:
    - .release:dockerhub
    - .target-gpu-operator-validator
  variables:
    OUT_IMAGE: "${REGISTRY_IMAGE}-validator"
  dependencies:
    - deploy:sha-ci-gpu-operator-validator
    - scan:gpu-operator-validator
